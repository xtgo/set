// Code generated by "mkgoset Ints int"; DO NOT EDIT.

package set

import (
	"sort"

	"github.com/xtgo/set"
)

type Ints struct{ data sort.IntSlice }

func NewInts(elems ...int) Ints {
	data := append(sort.IntSlice(nil), elems...)
	sort.Sort(data)
	size := set.Uniq(data)
	return Ints{data[:size]}
}

func (s Ints) mutate(fn set.Op, t Ints) Ints {
	data := append(s.data, t.data...)
	n := fn(data, len(s.data))
	return Ints{data[:n]}
}

func (s Ints) Len() int               { return len(s.data) }
func (s Ints) Append(dst []int) []int { return append(dst, s.data...) }
func (s Ints) Copy() Ints             { return Ints{s.Append(nil)} }

func (s Ints) Union(t Ints) Ints   { return s.mutate(set.Union, t) }
func (s Ints) Inter(t Ints) Ints   { return s.mutate(set.Inter, t) }
func (s Ints) SymDiff(t Ints) Ints { return s.mutate(set.SymDiff, t) }
func (s Ints) Diff(t Ints) Ints    { return s.mutate(set.Diff, t) }
